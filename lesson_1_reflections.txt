How did viewing a diff between two versions of a file help you see the bug that was introduced?
	Comparing the old working code and new not working code show the exact changes that were made. So when looking at the differences it's more likely to find the error that caused the problems.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
	In case the program doesn't work anymore and the bug is somehow untraceable, an old version of the program, that still worked can be restored. It can save a lot of time.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
	- When committing manually (hopefully) only files within a logical change are committed and the commits have an useful messages, so it's easier to comprehend what exactly changed or rather what is new in this commit
	- Only finished things are committed and not a half finished feature or even worse a not working feature

	- In case you often forget to save/commit you have something you can restore when you need it

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
	Because changes in one file might affect another file, so that file needs to be changed as well.

How can you use the commands git log and git diff to view the history of files?
	It shows the changes that were made in the new commit
	-git log --stat
	-git diff id1 id2

How might using version control make you more confident to make changes that could break something?
	Because in case something suddenly doesn't work anymore, an older working version of the code can always be restored and it can be easily retraced what caused the bug or misbehaviour or whatever

Now that you have your workspace set up, what do you want to try using Git for?
	Using it for a website project I am working on